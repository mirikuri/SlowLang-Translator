from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse, StreamingResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import asyncio
import random
from typing import List

app = FastAPI(title="SlowLang‚Ñ¢ Translator")

app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

PROCESS_MESSAGES = [
    "üß™ –ê–Ω–∞–ª–∏–∑ –º–æ—Ä—Ñ–µ–º...",
    "üîç –ü–æ–∏—Å–∫ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π...",
    "üß† –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...",
    "üí° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ–¥–µ–ª–∏ –ò–ò...",
    "üåç –í—ã–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...",
    "ü§î –ó–∞–¥—É–º–∞–ª—Å—è –Ω–∞–¥ –≥—Ä–∞–º–º–∞—Ç–∏–∫–æ–π...",
    "üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π...",
    "‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –≤–µ—Å–æ–≤...",
    "üåÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞..."
]

@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/translate")  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å POST –Ω–∞ GET
async def translate(text: str):
    async def generate():
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = random.sample(PROCESS_MESSAGES, k=random.randint(3, 6))
        
        for msg in messages:
            await asyncio.sleep(random.uniform(2, 5))
            yield f"data: {msg}\n\n"
        
        translation = get_translation(text)
        for i in range(len(translation)):
            await asyncio.sleep(random.uniform(0.2, 0.5))
            yield f"data: TRANSLATION:{translation[:i+1]}\n\n"
        
        yield "data: DONE:üìò –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        yield "event: close\ndata: \n\n"  # –Ø–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

    return StreamingResponse(generate(), media_type="text/event-stream")

def get_translation(text: str) -> str:
    translations = {
        "hello": "–ø—Ä–∏–≤–µ—Ç",
    "world": "–º–∏—Ä",
    "how are you": "–∫–∞–∫ –¥–µ–ª–∞",
    "goodbye": "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è",
    "slow": "–º–µ–¥–ª–µ–Ω–Ω—ã–π",
    "translator": "–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫",
    "friend": "–¥—Ä—É–≥",
    "love": "–ª—é–±–æ–≤—å",
    "hate": "–Ω–µ–Ω–∞–≤–∏—Å—Ç—å",
    "peace": "–º–∏—Ä",
    "war": "–≤–æ–π–Ω–∞",
    "code": "–∫–æ–¥",
    "bug": "–±–∞–≥",
    "feature": "—Ñ–∏—á–∞",
    "developer": "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
    "keyboard": "–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
    "mouse": "–º—ã—à—å",
    "computer": "–∫–æ–º–ø—å—é—Ç–µ—Ä",
    "language": "—è–∑—ã–∫",
    "fast": "–±—ã—Å—Ç—Ä—ã–π",
    "slowly": "–º–µ–¥–ª–µ–Ω–Ω–æ",
    "run": "–±–µ–∂–∞—Ç—å",
    "stop": "—Å—Ç–æ–ø",
    "error": "–æ—à–∏–±–∫–∞",
    "success": "—É—Å–ø–µ—Ö",
    "fire": "–æ–≥–æ–Ω—å",
    "ice": "–ª—ë–¥",
    "dark": "—Ç—ë–º–Ω—ã–π",
    "light": "—Å–≤–µ—Ç–ª—ã–π",
    "sky": "–Ω–µ–±–æ",
    "earth": "–∑–µ–º–ª—è",
    "sun": "—Å–æ–ª–Ω—Ü–µ",
    "moon": "–ª—É–Ω–∞",
    "star": "–∑–≤–µ–∑–¥–∞",
    "galaxy": "–≥–∞–ª–∞–∫—Ç–∏–∫–∞",
    "universe": "–≤—Å–µ–ª–µ–Ω–Ω–∞—è",
    "time": "–≤—Ä–µ–º—è",
    "space": "–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ",
    "future": "–±—É–¥—É—â–µ–µ",
    "past": "–ø—Ä–æ—à–ª–æ–µ",
    "present": "–Ω–∞—Å—Ç–æ—è—â–µ–µ",
    "robot": "—Ä–æ–±–æ—Ç",
    "ai": "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
    "machine": "–º–∞—à–∏–Ω–∞",
    "human": "—á–µ–ª–æ–≤–µ–∫",
    "life": "–∂–∏–∑–Ω—å",
    "death": "—Å–º–µ—Ä—Ç—å",
    "beginning": "–Ω–∞—á–∞–ª–æ",
    "end": "–∫–æ–Ω–µ—Ü"
    }
    return " ".join(translations.get(word.lower(), word) for word in text.split())